"""Customised configuration for the Airflow webserver.

"""
from __future__ import annotations

import os
{%- if authtype == "dbauth" %}
from airflow.www.fab_security.manager import AUTH_DB
{%- elif authtype == "oauth" %}
from airflow.www.fab_security.manager import AUTH_OAUTH
{%- endif %}


basedir = os.path.abspath(os.path.dirname(__file__))
{%- if authtype == "oauth" %}
  {%- if provider == "azure" %}

FAB_SECURITY_MANAGER_CLASS = "flowz.security.WmSecurityManager"
  {%- endif %}
{%- endif %}

# Flask-WTF flag for CSRF
WTF_CSRF_ENABLED = True

# ----------------------------------------------------
# AUTHENTICATION CONFIG
# ----------------------------------------------------
#
# The supported authentication type.
AUTH_TYPE = {% if authtype == "dbauth" %}AUTH_DB{% else %}AUTH_OAUTH{% endif %}
{% if authtype == "dbauth" %}
# Uncomment to setup Public role name, no authentication needed.
AUTH_ROLE_PUBLIC = "{% if public_role == 'admin' %}Admin{% else %}Public{% endif %}"
{% endif %}
# Will allow user self registration.
AUTH_USER_REGISTRATION = True{% if authtype == "oauth" %}

# If we should replace ALL the user's roles each login, or only on registration.
AUTH_ROLES_SYNC_AT_LOGIN = True

# Force users to re-auth after 30 minutes of inactivity (to keep roles in sync).
PERMANENT_SESSION_LIFETIME = 1800
{% if (provider is none) or (provider == "azure") %}
AZURE_AD_TENANT_ID = os.environ.get("AZURE_AD_TENANT_ID")
AZURE_AD_APPLICATION_ID = os.environ.get("AZURE_AD_APPLICATION_ID")
AZURE_AD_SECRET = os.environ.get("AZURE_AD_SECRET")
{% endif %}
OAUTH_PROVIDERS = [
{%- if (provider is none) or (provider == "google") %}
    {
        "name": "google",
        "token_key": "access_token",
        "icon": "fa-google",
        "remote_app": {
            "api_base_url": "https://www.googleapis.com/oauth2/v2/",
            "client_kwargs": {"scope": "email profile"},
            "access_token_url": "https://accounts.google.com/o/oauth2/token",
            "authorize_url": "https://accounts.google.com/o/oauth2/auth",
            "request_token_url": None,
            "client_id": os.environ.get("GOOGLE_IAM_KEY"),
            "client_secret": os.environ.get("GOOGLE_IAM_SECRET_KEY"),
        },
    },
{%- endif %}
{%- if (provider is none) or (provider == "azure") %}
    {
        "name": "azure",
        "token_key": "access_token",
        "icon": "fa-windows",
        "remote_app": {
            "api_base_url": f"https://login.microsoftonline.com/{AZURE_AD_TENANT_ID}/oauth2",
            "client_kwargs": {
                "scope": "User.read name preferred_username email profile upn",
                "resource": f"{AZURE_AD_APPLICATION_ID}",
            },
            "access_token_url": f"https://login.microsoftonline.com/{AZURE_AD_TENANT_ID}/oauth2/token",
            "authorize_url": f"https://login.microsoftonline.com/{AZURE_AD_TENANT_ID}/oauth2/authorize",
            "request_token_url": None,
            "client_id": f"{AZURE_AD_APPLICATION_ID}",
            "client_secret": f"{AZURE_AD_SECRET}",
        },
    },
{%- endif %}
]
{%- endif %}
